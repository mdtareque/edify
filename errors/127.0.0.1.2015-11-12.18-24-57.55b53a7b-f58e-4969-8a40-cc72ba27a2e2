(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> invalid literal for int() with base 10: '25T00:00'"
p3
sS'layer'
p4
S'/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/Project/web2py/applications/edify/controllers/course.py'
p5
sS'code'
p6
S'import time\n\n@auth.requires_login()\ndef index():\n\t#list the courses available for current year for registration\n\tcourses = []\n\trows = db(db.course).select()\n\tfor row in rows:\n\t\tcourses.append([row.name, row.faculty.first_name + " " +  row.faculty.last_name, row.id])\n\treturn locals()\n\n@auth.requires_login()\ndef view():\n\tcourse_id = request.args(0)\n\trows = db(db.course.id ==course_id).select()\n\t#faculty = None\n\tif(len(rows) == 0):\n\t\tresponse.flash = "Invalid course"\n\telse:\n\t\tmessage = rows[0].name\n\t\tfaculty = rows[0].faculty.first_name + " " + rows[0].faculty.last_name\n\t\tcourse_description = rows[0].course_description\n\t\trows = db((db.course_registration.cid==course_id)&(db.course_registration.sid==auth.user.id)).select()\n\t\tif len(rows) == 0:\n\t\t\tregistered = 0\n\t\telse:\n\t\t\tregistered = 1\n\t\trows = db((db.course_ta.cid==course_id)&(db.course_ta.sid==auth.user.id)).select()\n\t\tif len(rows) == 0:\n\t\t\tis_ta = 0\n\t\telse:\n\t\t\tis_ta = 1\t\n\treturn locals()\n\n@auth.requires_login()\ndef register():\n\tcourse_id = request.args(0)\n\trows = db(db.course.id ==course_id).select()\n\t#faculty = None\n\tif(len(rows) == 0):\n\t\tresponse.flash = "Invalid course"\n\telse:\n\t\tdb.course_registration.insert(cid=course_id, sid=auth.user.id)\n\t\tredirect(URL("course","view/"+str(course_id)))\n\treturn locals()\n\t\t\n@auth.requires_login()\ndef unregister():\n\tcourse_id = request.args(0)\n\trows = db(db.course.id ==course_id).select()\n\tif(len(rows) == 0):\n\t\tresponse.flash = "Invalid course"\n\telse:\n\t\tdb((db.course_registration.cid==course_id)&(db.course_registration.sid==auth.user.id)).delete()\n\t\tredirect(URL("course","view/"+str(course_id)))\n\treturn locals()\n\n@auth.requires_login()\ndef ta_register():\n\tcourse_id = request.args(0)\n\trows = db(db.course.id ==course_id).select()\n\t#faculty = None\n\tif(len(rows) == 0):\n\t\tresponse.flash = "Invalid course"\n\telse:\n\t\tdb.course_ta.insert(cid=course_id, sid=auth.user.id)\n\t\tredirect(URL("course","view/"+str(course_id)))\n\treturn locals()\n\t\t\n@auth.requires_login()\ndef ta_unregister():\n\tcourse_id = request.args(0)\n\trows = db(db.course.id ==course_id).select()\n\tif(len(rows) == 0):\n\t\tresponse.flash = "Invalid course"\n\telse:\n\t\tdb((db.course_ta.cid==course_id)&(db.course_ta.sid==auth.user.id)).delete()\n\t\tredirect(URL("course","view/"+str(course_id)))\n\treturn locals()\n\n@auth.requires_login()\ndef manage_course():\n\tcourse_id = request.args(0)\t\n\tta_requests = db((db.course_ta.cid == course_id)&(db.course_ta.approval == \'no\')).select()\n\tcourse_ta   = db((db.course_ta.cid == course_id)&(db.course_ta.approval == \'yes\')).select()\n\tif(len(ta_requests) == 0):\n\t\tcourses = db(db.course.id == course_id).select()\n\t\tmessage = courses[0].name#response.flash = "Invalid course"\n\telse:\n\t\tmessage = ta_requests[0].cid.name\n\treturn locals()\n\n@auth.requires_login()\ndef main():\n\tcourse_id = request.args(0)\n\trows = db(db.course.id ==course_id).select()\n\tif(len(rows) == 0):\n\t\tresponse.flash = "Invalid course"\n\telse:\n\t\tmessage = rows[0].name\n\t\tfaculty = rows[0].faculty\n\t\tinstructor = rows[0].faculty.first_name + " " + rows[0].faculty.last_name\n\t\tcourse_description = rows[0].course_description\n\t\trows = db((db.course_registration.cid==course_id)&(db.course_registration.sid==auth.user.id)).select()\n\t\tif len(rows) == 0:\n\t\t\tregistered = 0\t\t\t\n\t\telse:\n\t\t\tregistered = 1\n\t\trows = db((db.course_ta.cid==course_id)&(db.course_ta.sid==auth.user.id)).select()\n\t\tif len(rows) == 0:\n\t\t\tis_ta = 0\n\t\telse:\n\t\t\tis_ta = 1\n\t\tif( registered == 0 and is_ta == 0 and faculty != auth.user.id):\n\t\t\tredirect(URL("default","index"))\n\t\ttas = db((db.course_ta.cid == course_id)).select()\n\treturn locals()\n\n@auth.requires_login()\ndef approve_ta():\n\tta_id =request.args(0)\n\tta_requests = db((db.course_ta.id == ta_id)).select()\n\tif(len(ta_requests) == 0):\n\t\tresponse.flash = "Invalid TA"\n\telse:\n\t\tdb((db.course_ta.id == ta_id)).update(approval=\'yes\')\n\t\tredirect(URL("course","manage_course/"+str(ta_requests[0].cid)))\n\treturn locals()\n\n@auth.requires_login()\ndef reject_ta():\n\tta_id =request.args(0)\n\tta_requests = db((db.course_ta.id == ta_id)).select()\n\tif(len(ta_requests) == 0):\n\t\tresponse.flash = "Invalid TA"\n\telse:\n\t\tdb((db.course_ta.id == ta_id)).delete()\n\t\tredirect(URL("course","manage_course/"+str(ta_requests[0].cid)))\n\treturn locals()\n\n@auth.requires_login()\ndef home():\n\tcourse_id = request.args(0)\n\tcourse = db(db.course.id == course_id).select()\n\tif(course and len(course) == 1):\n\t\tcourse_des = course[0].course_description\t\t\t\t\n\telse:\n\t\tresponse.flash = "Invalid course" \n\treturn locals()\n\n@auth.requires_login()\ndef assignments():\n\tcourse_id = request.args(0)\n\tcourse = db(db.course.id == course_id).select()\n\tis_staff = 0\n\tif(len(course) == 0):\n\t\tresponse.flash = "Invalid course" \n\telse:\n\t\tif course[0].faculty == auth.user.id:\n\t\t\tis_staff = 1\n\t\telse:\n\t\t\tta = db((db.course_ta.cid == course_id)&(db.course_ta.sid == auth.user.id)).select()\n\t\t\tif len(ta) == 1:\n\t\t\t\tis_staff = 1\t\n\t\t\tlinks = db(db.course_assignments.cid==course_id).select()\t\t\t\t\n\treturn locals()\n\n@auth.requires_login()\ndef upload_assignment():\n\tdata = request.vars\n\tcourse_id = request.args(0)\n\tcourse = db(db.course.id == course_id).select()\n\tif(len(course) == 0):\n\t\tresponse.flash = "Invalid course" \n\telse:\n\t\tdata = request.vars\n\t\tdb.course_assignments.insert(cid=course_id,sid=auth.user.id,attachment=data.assignment_file, title=data.assignment_name, deadline=data.assignment_deadline, total_marks=data.assignment_total_marks)\t\t\t\n\tredirect(URL(\'course\',\'main/\'+str(course_id)))\n\treturn locals()\n\n@auth.requires_login()\ndef upload_resource():\n\tdata = request.vars\n\tcourse_id = request.args(0)\n\tcourse = db(db.course.id == course_id).select()\n\tif(len(course) == 0):\n\t\tresponse.flash = "Invalid course" \n\telse:\n\t\tdata = request.vars\n\t\tdb.course_resources.insert(cid=course_id,sid=auth.user.id,attachment=data.resource_file, title=data.resource_name)\t\t\t\n\tredirect(URL(\'course\',\'main/\'+str(course_id)))\n\treturn locals()\n\n@auth.requires_login()\ndef resources():\n\tcourse_id = request.args(0)\n\tcourse = db(db.course.id == course_id).select()\n\tis_staff = 0\n\tif(len(course) == 0):\n\t\tresponse.flash = "Invalid course" \n\telse:\n\t\tif course[0].faculty == auth.user.id:\n\t\t\tis_staff = 1\n\t\telse:\n\t\t\tta = db((db.course_ta.cid == course_id)&(db.course_ta.sid == auth.user.id)).select()\n\t\t\tif len(ta) == 1:\n\t\t\t\tis_staff = 1\n\t\t\tlinks = db(db.course_resources.cid==course_id).select()\t\t\t\t\n\treturn locals()\n\n@auth.requires_login()\ndef upload():\n\tcourse_id = request.args(0)\n\tcourse = db(db.course.id == course_id).select()\n\tif(len(course) == 0):\n\t\tresponse.flash = "Invalid course"\n\treturn locals()\n\n@auth.requires_login()\ndef marks():\n\tcourse_id = request.args(0)\n\tcourse = db(db.course.id == course_id).select()\n\tif(len(course) == 0):\n\t\tresponse.flash = "Invalid course"\n\treturn locals()\n\nresponse._vars=response._caller(assignments)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/Project/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/Project/web2py/applications/edify/controllers/course.py", line 227, in <module>\n  File "/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/Project/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/Project/web2py/gluon/tools.py", line 3774, in f\n    return action(*a, **b)\n  File "/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/Project/web2py/applications/edify/controllers/course.py", line 165, in assignments\n    links = db(db.course_assignments.cid==course_id).select()\n  File "/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/Project/web2py/gluon/packages/dal/pydal/objects.py", line 2002, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/Project/web2py/gluon/packages/dal/pydal/adapters/sqlite.py", line 122, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/Project/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1286, in select\n    return self._select_aux(sql,fields,attributes)\n  File "/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/Project/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1243, in _select_aux\n    self.execute(sql)\n  File "/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/Project/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1378, in execute\n    return self.log_execute(*a, **b)\n  File "/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/Project/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1372, in log_execute\n    ret = self.cursor.execute(command, *a[1:], **b)\n  File "/anaconda/lib/python2.7/sqlite3/dbapi2.py", line 65, in convert_date\n    return datetime.date(*map(int, val.split("-")))\nValueError: invalid literal for int() with base 10: \'25T00:00\'\n'
p11
s.