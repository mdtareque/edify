(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'SQLFORM' object has no attribute 'email'"
p3
sS'layer'
p4
S'/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/hackathon-github/web2py/applications/edify/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\nimport datetime\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    #response.flash = T("Hello World")\n    if auth.user :\n        redirect("home")\n    message="Welcome to Edify!"\n    return locals()#dict(message=T(\'Welcome to web2py!\'))\n\n@auth.requires_login()\ndef admin():\n    if auth.user.role != \'Admin\':\n        redirect("home")\n    user_table = None\n    course_table = None\n    verify_grid = None\n    rows = None\n    if request.args(0) == "auth_user":\n        user_table = SQLFORM.smartgrid(db.auth_user)\n    elif request.args(0) == "course":\n        course_table = SQLFORM.smartgrid(db.course)\n    elif request.args(0) == "verify_faculty":\n        query = (db.auth_user.admin_verified == \'no\')&(db.auth_user.role == \'faculty\')       \n        #verify_grid = SQLFORM.smartgrid(db.auth_user, constraints = dict(auth_user=query))\n        verify_grid = 12\n        rows = db(query).select()\n        if(len(rows) == 0):\n            verify_grid = -1\n        else:\n            verify_grid = len(rows)\n    return locals()\n\n@auth.requires_login()\ndef admin_verify():\n    if auth.user.role != \'Admin\' or request.args(0) == None:\n        redirect("home")\n    user1_id = request.args(0)\n    row = db(db.auth_user.id == user1_id).select()\n    if len(row) == 0:\n        response.flash = "Invalid user"\n    else :\n        db(db.auth_user.id == user1_id).update(admin_verified=\'yes\')\n        \n        #redirect("admin");\n    response.template = "admin"\n    s = str(len(row))\n    response.flash = s\n    redirect(URL("default","admin/verify_faculty"))\n    return locals()\n\n\n\n@auth.requires_login()\ndef home():\n    message = None\n    auth_error = None\n    courses = None\n    my_courses = None\n    user_id = auth.user.id\n    rows = db( (db.auth_user.id == user_id) & (db.auth_user.admin_verified == \'no\') & (db.auth_user.role == \'faculty\') ).select()\n    if(len(rows) == 1):\n        auth_error = "You are still awaiting faculty status approval, contact admin for more details "\n    else:\n        message = "Welcome, "+auth.user.first_name        \n        if auth.user.role == \'faculty\':\n            courses = db(db.course.faculty == user_id).select()\n            courses_undertaken = db(db.course.faculty == auth.user.id).select()\n            course_id_set = set( [i.id for i in courses_undertaken] )    \n\n            if len(course_id_set)!=0:\n                activities = db((db.activity.activity_scope.belongs((\'all\',\'faculty\'))) & (db.activity.cid.belongs(course_id_set))).select(orderby=~db.activity.publish_date)\n            else :\n                activities = []\n        else:\n            my_courses = db((db.course_registration.sid == user_id)).select()            \n            my_ta_courses = db(db.course_ta.sid == user_id).select()\n            course_ids = set([ i.cid for i in my_courses ])            \n            if(len(my_ta_courses) != 0):\n                for i in my_ta_courses:\n                    course_ids.add(i.cid)\n                activities = db((db.activity.activity_scope.belongs(\'all\',\'ta\')) & (db.activity.cid.belongs(course_ids))).select(orderby=~db.activity.publish_date)\n            else:\n                activities = db((db.activity.activity_scope == \'all\') & (db.activity.cid.belongs(course_ids))).select(orderby=~db.activity.publish_date)    \n            \n            #activities = db((db.activity.activity_scope == \'all\') & (db.activity.cid.belongs(course_ids))).select()\n            dead_lines = db((db.course_assignments.deadline >= datetime.datetime.now()) & (db.course_assignments.cid.belongs(course_ids))).select()\n    return locals()    \n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    #if request.args(0) == \'register\':    \n    return dict(form=auth())\n\ndef register():\n\n    def validate_email(form):\n        email_id = form.email\n        at_i = email_id.find("@")\n        dom = email_id[at_i:]\n        if(dom != "@students.iiit.ac.in"):\n            form.email.error = "Invalid email: only students mail id\'s are accepted"\n    auth.settings.register_onvalidation.append(validate_email)\n    form=auth.register()\n    return locals()\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(register)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/hackathon-github/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/hackathon-github/web2py/applications/edify/controllers/default.py", line 158, in <module>\n  File "/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/hackathon-github/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/hackathon-github/web2py/applications/edify/controllers/default.py", line 134, in register\n    form=auth.register()\n  File "/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/hackathon-github/web2py/gluon/tools.py", line 2935, in register\n    hideerror=self.settings.hideerror):\n  File "/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/hackathon-github/web2py/gluon/sqlhtml.py", line 1495, in accepts\n    **kwargs\n  File "/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/hackathon-github/web2py/gluon/html.py", line 2139, in accepts\n    call_as_list(onvalidation, self)\n  File "/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/hackathon-github/web2py/gluon/html.py", line 146, in call_as_list\n    item(*a, **b)\n  File "/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/hackathon-github/web2py/applications/edify/controllers/default.py", line 128, in validate_email\n    email_id = form.email\nAttributeError: \'SQLFORM\' object has no attribute \'email\'\n'
p11
s.