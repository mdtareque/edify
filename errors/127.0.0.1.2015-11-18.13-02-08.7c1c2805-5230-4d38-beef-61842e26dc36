(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'NoneType' object has no attribute 'mid1'"
p3
sS'layer'
p4
S'/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/hackathon-github/web2py/applications/edify/controllers/course.py'
p5
sS'code'
p6
S'import time,datetime\n\nPOST_PER_PAGE=6\n\n@auth.requires_login()\ndef index():\n#list the courses available for current year for registration\n    courses = []\n    page = request.args(0, cast=int, default=0)\n    start = page*POST_PER_PAGE\n    stop = start + POST_PER_PAGE\n    rows = db(db.course).select(limitby=(start, stop))\n    for row in rows:\n      courses.append([row.name, row.faculty.first_name + " " +  row.faculty.last_name, row.id])\n    return locals()\n\n@auth.requires_login()\ndef index_search():\n    courses = []\n    page = request.args(0, cast=int, default=0)\n    start = page*POST_PER_PAGE\n    stop = start + POST_PER_PAGE\n    search_query = request.vars.search_courses\n    rows = db(db.course.name.like(\'%\'+search_query+\'%\')).select(limitby=(start, stop))\n    for row in rows:\n        courses.append([row.name, row.faculty.first_name + " " +  row.faculty.last_name, row.id])\n    return locals()\n\n# @auth.requires_login()\n# def index():\n# \t#list the courses available for current year for registration\n# \tcourses = []\n# \trows = db(db.course).select()\n# \tfor row in rows:\n# \t\tcourses.append([row.name, row.faculty.first_name + " " +  row.faculty.last_name, row.id])\n# \treturn locals()\n\n@auth.requires_login()\ndef view():\n\tcourse_id = request.args(0)\n\trows = db(db.course.id ==course_id).select()\n\t#faculty = None\n\tif(len(rows) == 0):\n\t\tresponse.flash = "Invalid course"\n\telse:\n\t\tmessage = rows[0].name\n\t\tfaculty = rows[0].faculty.first_name + " " + rows[0].faculty.last_name\n\t\tcourse_description = rows[0].course_description\n\t\trows = db((db.course_registration.cid==course_id)&(db.course_registration.sid==auth.user.id)).select()\n\t\tif len(rows) == 0:\n\t\t\tregistered = 0\n\t\telse:\n\t\t\tregistered = 1\n\t\trows = db((db.course_ta.cid==course_id)&(db.course_ta.sid==auth.user.id)).select()\n\t\tif len(rows) == 0:\n\t\t\tis_ta = 0\n\t\telse:\n\t\t\tis_ta = 1\t\n\treturn locals()\n\n@auth.requires_login()\ndef register():\n\tcourse_id = request.args(0)\n\trows = db(db.course.id ==course_id).select()\n\t#faculty = None\n\tif(len(rows) == 0):\n\t\tresponse.flash = "Invalid course"\n\telse:\n\t\tdb.course_registration.insert(cid=course_id, sid=auth.user.id)\n\t\tdb.activity.insert(cid=course_id, sid=auth.user.id, \n\t\t\tdescription="You registered for "+rows[0].name+" course.",\n\t\t\tactivity_scope="student"\n\t\t\t)\n\t\tredirect(URL("course","main/"+str(course_id)))\n\treturn locals()\n\t\t\n@auth.requires_login()\ndef unregister():\n\tcourse_id = request.args(0)\n\trows = db(db.course.id ==course_id).select()\n\tif(len(rows) == 0):\n\t\tresponse.flash = "Invalid course"\n\telse:\n\t\tdb((db.course_registration.cid==course_id)&(db.course_registration.sid==auth.user.id)).delete()\n\t\tdb.activity.insert(cid=course_id, sid=auth.user.id, \n\t\t\tdescription="You left "+rows[0].name+" course.",\n\t\t\tactivity_scope="student"\n\t\t\t)\n\t\tredirect(URL("course","main/"+str(course_id)))\n\t\t\n\treturn locals()\n\n@auth.requires_login()\ndef ta_register():\n\tcourse_id = request.args(0)\n\trows = db(db.course.id ==course_id).select()\n\t#faculty = None\n\tif(len(rows) == 0):\n\t\tresponse.flash = "Invalid course"\n\telse:\n\t\tdb.course_ta.insert(cid=course_id, sid=auth.user.id)\n\t\t#adding activity\n\t\tdb.activity.insert(cid=course_id, sid=auth.user.id, \n\t\t\tdescription=auth.user.first_name+" "+auth.user.last_name+" requested for TAship for "+rows[0].name+" course.",\n\t\t\tactivity_scope="faculty"\n\t\t\t)\n\t\tdb.activity.insert(cid=course_id, sid=auth.user.id, \n\t\t\tdescription="You requested for TAship for "+rows[0].name+" course.",\n\t\t\tactivity_scope="student"\n\t\t\t)\n\t\tredirect(URL("course","main/"+str(course_id)))\n\treturn locals()\n\t\t\n@auth.requires_login()\ndef ta_unregister():\n\tcourse_id = request.args(0)\n\trows = db(db.course.id ==course_id).select()\n\tif(len(rows) == 0):\n\t\tresponse.flash = "Invalid course"\n\telse:\n\t\tdb((db.course_ta.cid==course_id)&(db.course_ta.sid==auth.user.id)).delete()\n\t\tdb.activity.insert(cid=course_id, sid=auth.user.id, \n\t\t\tdescription=auth.user.first_name+" "+auth.user.last_name+" left TAship for "+rows[0].name+" course.",\n\t\t\tactivity_scope="faculty"\n\t\t\t)\n\t\tdb.activity.insert(cid=course_id, sid=auth.user.id, \n\t\t\tdescription="You left TAship for "+rows[0].name+" course.",\n\t\t\tactivity_scope="student"\n\t\t\t)\n\t\tredirect(URL("course","main/"+str(course_id)))\t\t\n\treturn locals()\n\n@auth.requires_login()\ndef manage_course():\n\tcourse_id = request.args(0)\t\n\tta_requests = db((db.course_ta.cid == course_id)&(db.course_ta.approval == \'no\')).select()\n\tcourse_ta   = db((db.course_ta.cid == course_id)&(db.course_ta.approval == \'yes\')).select()\n\tif(len(ta_requests) == 0):\n\t\tcourses = db(db.course.id == course_id).select()\n\t\tmessage = courses[0].name#response.flash = "Invalid course"\n\telse:\n\t\tmessage = ta_requests[0].cid.name\n\treturn locals()\n\n@auth.requires_login()\ndef main():\n\tcourse_id = request.args(0)\n\trows = db(db.course.id ==course_id).select()\n\tif(len(rows) == 0):\n\t\tresponse.flash = "Invalid course"\n\telse:\n\t\thas_edit_access = 0\n\t\tmessage = rows[0].name\n\t\tfaculty = rows[0].faculty\n\t\tinstructor = rows[0].faculty.first_name + " " + rows[0].faculty.last_name\n\t\tcourse_description = rows[0].course_description\n\t\trows = db((db.course_registration.cid==course_id)&(db.course_registration.sid==auth.user.id)).select()\n\t\tif len(rows) == 0:\n\t\t\tregistered = 0\t\t\t\n\t\telse:\n\t\t\tregistered = 1\n\t\trows = db((db.course_ta.cid==course_id)&(db.course_ta.sid==auth.user.id)).select()\n\t\tif len(rows) == 0:\n\t\t\tis_ta = 0\n\t\telse:\n\t\t\tis_ta = 1\n\t\trows = db((db.course_ta.cid==course_id)&(db.course_ta.sid==auth.user.id)&(db.course_ta.approval==\'yes\')).select()\n\t\tif len(rows) == 0:\n\t\t\tis_ta_approved = 0\t\t\t\n\t\telse:\n\t\t\tis_ta_approved = 1\n\t\t\thas_edit_access = 1\n\t\trows = db((db.course_ta.cid==course_id)&(db.course_ta.sid==auth.user.id)&(db.course_ta.approval == \'yes\')).select() \n\t\tif( len(rows) == 1):\n\t\t\tta_approved = 1\n\t\telse:\n\t\t\tta_approved = 0\n\t\tif faculty == auth.user.id:\n\t\t\thas_edit_access = 1\n\n\t\t# if( registered == 0 and is_ta == 0 and faculty != auth.user.id):\n\t\t# \tredirect(URL("default","index"))\n\t\ttas = db((db.course_ta.cid == course_id)&(db.course_ta.approval == \'yes\')).select()\n\treturn locals()\n\n@auth.requires_login()\ndef approve_ta():\n\tta_id =request.args(0)\n\tta_requests = db((db.course_ta.id == ta_id)).select()\n\tif(len(ta_requests) == 0):\n\t\tsession.flash = "Invalid TA"\n\telse:\n\t\tdb((db.course_ta.id == ta_id)).update(approval=\'yes\')\n\t\tdb.activity.insert(cid=ta_requests[0].cid, sid=auth.user.id, \n\t\t\tdescription=auth.user.first_name+" "+auth.user.last_name+" approved your TAship request for "+ta_requests[0].cid.name+" course.",\n\t\t\tactivity_scope="ta"\n\t\t\t)\n\t\tsession.flash = "TA request accepted successfully"\n\tredirect(URL("course","main/"+str(ta_requests[0].cid)))\n\treturn locals()\n\n@auth.requires_login()\ndef reject_ta():\n\tta_id =request.args(0)\n\tta_requests = db((db.course_ta.id == ta_id)).select()\n\tif(len(ta_requests) == 0):\n\t\tsession.flash = "Invalid TA"\n\telse:\n\t\tdb((db.course_ta.id == ta_id)).delete()\n\t\tdb.activity.insert(cid=ta_requests[0].cid, sid=auth.user.id, \n\t\t\tdescription=auth.user.first_name+" "+auth.user.last_name+" rejected your TAship request for "+ta_requests[0].cid.name+" course.",\n\t\t\tactivity_scope="ta"\n\t\t\t)\n\t\tsession.flash = "TA request rejected successfully"\n\tredirect(URL("course","main/"+str(ta_requests[0].cid)))\n\treturn locals()\n\n@auth.requires_login()\ndef home():\n\tcourse_id = request.args(0)\n\tcourse = db(db.course.id == course_id).select()\n\tif(course and len(course) == 1):\n\t\tcourse_des = course[0].course_description\t\t\t\t\n\t\thas_edit_access = 0\n\t\tfaculty = course[0].faculty\t\t\n\t\trows = db((db.course_ta.cid==course_id)&(db.course_ta.sid==auth.user.id)&(db.course_ta.approval==\'yes\')).select()\n\t\tif len(rows) == 0:\n\t\t\tis_ta_approved = 0\t\t\t\n\t\telse:\n\t\t\tis_ta_approved = 1\n\t\t\thas_edit_access = 1\t\t\n\t\tif faculty == auth.user.id:\n\t\t\thas_edit_access = 1\n\telse:\n\t\tresponse.flash = "Invalid course" \n\treturn locals()\n\n@auth.requires_login()\ndef assignments():\n\tcourse_id = request.args(0)\n\tcourse = db(db.course.id == course_id).select()\n\tis_staff = 0\n\tif(len(course) == 0):\n\t\tresponse.flash = "Invalid course" \n\telse:\n\t\tif course[0].faculty == auth.user.id:\n\t\t\tis_staff = 1\n\t\telse:\t\t\t\n\t\t\tta_approved = db((db.course_ta.cid == course_id)&(db.course_ta.sid == auth.user.id)&(db.course_ta.approval==\'yes\')).select()\t\t\t\n\t\t\tif len(ta_approved) == 1:\n\t\t\t\tta_approved = 1\n\t\t\telse:\n\t\t\t\tta_approved = 0\n\t\tlinks = db(db.course_assignments.cid==course_id).select()\t\t\t\t\n\treturn locals()\n\n@auth.requires_login()\ndef upload_assignment():\n\tdata = request.vars\n\tcourse_id = request.args(0)\n\tcourse = db(db.course.id == course_id).select()\n\tif(len(course) == 0):\n\t\tresponse.flash = "Invalid course" \n\telse:\n\t\tdata = request.vars\n\t\tdb.course_assignments.insert(cid=course_id,sid=auth.user.id,attachment=data.assignment_file, title=data.assignment_name, deadline=data.assignment_deadline, total_marks=data.assignment_total_marks)\t\t\t\n\t\tdb.activity.insert(cid=course_id, sid=auth.user.id, \n\t\t\tdescription=auth.user.first_name+" "+auth.user.last_name+" uploaded new assignment, \\""+data.assignment_name+"\\" for "+course[0].name+" course.",\n\t\t\tactivity_scope="all"\n\t\t\t)\n\t\tsession.flash = "File uploaded successfully"\n\tredirect(URL(\'course\',\'main/\'+str(course_id)))\n\treturn locals()\n\n\n@auth.requires_login()\ndef upload_student_assignment():\n\tdata = request.vars\n\tcourse_id = request.args(0)\n\tcourse = db(db.course.id == course_id).select()\n\tif(len(course) == 0):\n\t\tresponse.flash = "Invalid course" \n\telse:\n\t\tdata = request.vars\n\t\trecent_uploads = db((db.course_assignment_upload.aid == data.assignment_id)&(db.course_assignment_upload.sid==auth.user.id)).select()\n\t\tif(len(recent_uploads) == 5):\n\t\t\tsession.flash = "Maximum upload limit exceeded"\n\t\telse:\n\t\t\tdb.course_assignment_upload.insert(aid=data.assignment_id,sid=auth.user.id,attachment=data.assignment_file)\t\t\t\n\t\t\tsession.flash = "File uploaded successfully"\n\tredirect(URL(\'course\',\'main/\'+str(course_id)))\n\treturn locals()\n\n@auth.requires_login()\ndef upload_resource():\n\tdata = request.vars\n\tcourse_id = request.args(0)\n\tcourse = db(db.course.id == course_id).select()\n\tif(len(course) == 0):\n\t\tresponse.flash = "Invalid course" \n\telse:\n\t\tdata = request.vars\n\t\tdb.course_resources.insert(cid=course_id,sid=auth.user.id,attachment=data.resource_file, title=data.resource_name)\t\t\t\n\t\tdb.activity.insert(cid=course_id, sid=auth.user.id, \n\t\t\tdescription=auth.user.first_name+" "+auth.user.last_name+" uploaded new resource, \\""+data.resource_name+"\\" for "+course[0].name+" course.",\n\t\t\tactivity_scope="all"\n\t\t\t)\n\t\tsession.flash = "File uploaded successfully"\n\tredirect(URL(\'course\',\'main/\'+str(course_id)))\n\treturn locals()\n\n@auth.requires_login()\ndef resources():\n\tcourse_id = request.args(0)\n\tcourse = db(db.course.id == course_id).select()\n\tis_staff = 0\n\tif(len(course) == 0):\n\t\tresponse.flash = "Invalid course" \n\telse:\n\t\tif course[0].faculty == auth.user.id:\n\t\t\tis_staff = 1\n\t\telse:\n\t\t\tta_approved = db((db.course_ta.cid == course_id)&(db.course_ta.sid == auth.user.id)&(db.course_ta.approval==\'yes\')).select()\t\t\t\n\t\t\tif len(ta_approved) == 1:\n\t\t\t\tta_approved = 1\n\t\t\telse:\t\n\t\t\t\tta_approved = 0\n\t\tlinks = db(db.course_resources.cid==course_id).select()\t\t\t\t\n\treturn locals()\n\n@auth.requires_login()\ndef upload():\n\tcourse_id = request.args(0)\n\tcourse = db(db.course.id == course_id).select()\n\tif(len(course) == 0):\n\t\tresponse.flash = "Invalid course"\n\telse:\t\t\n\t\tta_approved = db((db.course_ta.cid == course_id)&(db.course_ta.sid == auth.user.id)&(db.course_ta.approval==\'yes\')).select()\t\t\t\n\t\tif len(ta_approved) == 1 or auth.user.role == "faculty":\n\t\t\tta_approved = 1\n\t\telse:\n\t\t\tta_approved = 0\n\t\tassignments = db((db.course_assignments.deadline >= datetime.datetime.now())&(db.course_assignments.cid == course_id)).select()\n\treturn locals()\n\n@auth.requires_login()\ndef marks():\n\tcourse_id = request.args(0)\n\tcourse = db(db.course.id == course_id).select()\t\n\tif(len(course) == 0):\n\t\tresponse.flash = "Invalid course"\n\telse:\n\t\tcourse = db((db.course_registration.cid == course_id)&(db.course_registration.sid == auth.user.id)).select().first()\t\n\t\tif course.mid1 == -1:\n\t\t\tmid1_marks = "TBA"\n\t\telse:\n\t\t\tmid1_marks = course.mid1\n\t\tif course.mid2 == -1:\n\t\t\tmid2_marks = "TBA"\n\t\telse:\n\t\t\tmid2_marks = course.mid2\n\t\tif course.sem == -1:\n\t\t\tsem_marks = "TBA"\n\t\telse:\n\t\t\tsem_marks = course.sem\n\t\tassignments = [ i.id for i in db(db.course_assignments.cid == course_id).select()]\n\t\tassignments = db((db.course_assignment_upload.aid.belongs(assignments)) & (db.course_assignment_upload.sid == auth.user.id)).select(db.course_assignment_upload.aid,db.course_assignment_upload.id,db.course_assignment_upload.marks,db.course_assignment_upload.sid,db.course_assignment_upload.attachment,db.course_assignment_upload.upload_date.max(),groupby=db.course_assignment_upload.sid)\n\treturn locals()\n\n\n@auth.requires_login()\ndef activity():\n\tcourse_id = request.args(0)\n\tcourse = db(db.course.id == course_id).select()\n\tif(len(course) == 0):\n\t\tresponse.flash = "Invalid course"\n\telse:\n\t\tactivities = db((db.activity.cid==course_id)&(db.activity.activity_scope==\'all\')).select(orderby=~db.activity.publish_date,limitby=(0, 20))\n\treturn locals()\n\n\n@auth.requires_login()\ndef approvals():\n\tcourse_id = request.args(0)\n\tcourse = db(db.course.id == course_id).select()\n\tif(len(course) == 0):\n\t\tresponse.flash = "Invalid course"\n\telse:\n\t\tta_requests = db((db.course_ta.cid == course_id)&(db.course_ta.approval == \'no\')).select()\n\t\tcourse_ta   = db((db.course_ta.cid == course_id)&(db.course_ta.approval == \'yes\')).select()\t\t\n\treturn locals()\n\n@auth.requires_login()\ndef delete_assignment():\n\tassignment_id = request.args(0)\n\tassignment = db(db.course_assignments.id == assignment_id).select()\n\n\tif( len(assignment) == 0):\n\t\tsession.flash = "Invalid assignment"\n\telse:\n\t\tcourse_id = assignment.first().cid\n\t\tdb(db.course_assignments.id == assignment_id).delete()\n\t\tdb.activity.insert(cid=course_id, sid=auth.user.id, \n\t\t\tdescription=auth.user.first_name+" "+auth.user.last_name+" deleted assignment, \\""+assignment.first().title+"\\" for "+assignment.first().cid.name+" course.",\n\t\t\tactivity_scope="all"\n\t\t\t)\n\t\tsession.flash = "Assignment deleted successfully"\n\t\tredirect(URL(\'course\',\'main/\'+str(course_id)))\n\n@auth.requires_login()\ndef delete_resource():\n\tresource_id = request.args(0)\n\tresource = db(db.course_resources.id == resource_id).select()\n\tif( len(resource) == 0):\n\t\tsessions.flash = "Invalid resources"\n\telse:\n\t\tcourse_id = resource.first().cid\n\t\tdb.activity.insert(cid=course_id, sid=auth.user.id, \n\t\t\tdescription=auth.user.first_name+" "+auth.user.last_name+" deleted resource, \\""+resource.first().title+"\\" for "+resource.first().cid.name+" course.",\n\t\t\tactivity_scope="all"\n\t\t\t)\n\t\tdb(db.course_resources.id == resource_id).delete()\n\t\tsession.flash = "Resource deleted successfully"\n\t\tredirect(URL(\'course\',\'main/\'+str(course_id)))\n\n@auth.requires_login()\ndef view_student_uploads():\n\t#return str(request.vars)\n\tassignment_id = request.vars.assignment_upload_id\t\n\trows = db(db.course_assignment_upload.aid==assignment_id).select(db.course_assignment_upload.aid,db.course_assignment_upload.id,db.course_assignment_upload.marks,db.course_assignment_upload.sid,db.course_assignment_upload.attachment,db.course_assignment_upload.upload_date.max(),groupby=db.course_assignment_upload.sid)\n\treturn locals()\n\n@auth.requires_login()\ndef update_overview():\n\tcourse_id = request.args(0)\n\tcontent = XML(request.vars.hidediv)\n\tif db.course(course_id):\n\t\tdb(db.course.id == course_id).update(course_description=content);\n\t\treturn "alert(\'Content updated successfully\')";\n\telse:\n\t\treturn "alert(\'error\')";\n\n@auth.requires_login()\ndef update_assignment_marks():\n\tdata = request.vars\n\tfor key in data.keys():\n\t\ttry:\n\t\t\tdata[key] = float(data[key])\n\t\texcept :\n\t\t\treturn "alert(\'Invalid number\')";\n\t\t#if type(data[key]) != int and type(data[key]) != float:\t\n\tfor key in data.keys():\n\t\tdb(db.course_assignment_upload.id == key).update(marks=data[key]);\n\treturn "alert(\'Content updated successfully\')";\n\t\t\n\n\n\n\n\n\n\n\n\n\nresponse._vars=response._caller(marks)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/hackathon-github/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/hackathon-github/web2py/applications/edify/controllers/course.py", line 466, in <module>\n  File "/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/hackathon-github/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/hackathon-github/web2py/gluon/tools.py", line 3774, in f\n    return action(*a, **b)\n  File "/Users/adityagaykar/Dropbox/Development/MtechCSE/Sem1/SCE/hackathon-github/web2py/applications/edify/controllers/course.py", line 354, in marks\n    if course.mid1 == -1:\nAttributeError: \'NoneType\' object has no attribute \'mid1\'\n'
p11
s.